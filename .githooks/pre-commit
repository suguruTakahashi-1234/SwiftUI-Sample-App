#!/bin/sh

# Run SwiftFormat in dryrun mode
output=$(swift run --package-path SampleAppToolsPackage swiftformat --lint --lenient .)

# Check if any files need formatting
if [ -n "$output" ]; then
  echo "SwiftFormat: Some files need formatting:"
  echo "$output"
  echo "Please format your code using SwiftFormat and create a new commit."
fi

: '

# 関数
run_swiftformat() {
  command="swift run --package-path SampleAppToolsPackage swiftformat"
  command -v $command >/dev/null 2>&1
  if [ $? -gt 0 ]; then
    echo "😓 swiftformat コマンドが見つかりません。"
    exit 1
  fi
  $command "$@"
}

# 変数
should_fail=false
staged_swift_files=$(git diff --diff-filter=d --staged --name-only | grep -e '\(.*\).swift$')

# メインスクリプト
if [ -z "$staged_swift_files" ]; then
  # 変更された Swift ファイルが見つからない場合
  exit 0
fi

while read file; do
  # ステージングされていない変更のパッチを作成
  unstaged_patch=$(git diff "$file")
  if [ ! -z "$unstaged_patch" ]; then
    # ステージングされていない変更がある場合は削除
    git restore $file
  fi

  # SwiftFormat でステージングされた変更のみをチェック（変更は適用されません）
  echo "👁 SwiftFormat: 確認中... $file"
  run_swiftformat --lint $file
  if [ $? -eq 0 ]; then
    if [ ! -z "$unstaged_patch" ]; then
      # パッチがある場合は適用して未ステージの変更を復元
      echo "$unstaged_patch" | git apply --whitespace=nowarn
    fi
    printf "\n"
    continue
  fi

  should_fail=true
  if [ ! -z "$unstaged_patch" ]; then
    # パッチがある場合は適用して未ステージの変更を復元
    echo "$unstaged_patch" | git apply --whitespace=nowarn
  fi

  # ファイルにSwiftFormatを適用（変更が適用されます）
  echo "🪬 SwiftFormat: 適用中... $file"
  run_swiftformat $file
  printf "\n"
done <<< "$staged_swift_files"

if $should_fail; then
  echo "⛔️ SwiftFormatによってコードに変更が生じました。"
  echo "変更を取り入れるなどの対応をお願いします。"
  exit 1
fi

'